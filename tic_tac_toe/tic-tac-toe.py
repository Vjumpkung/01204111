# -*- coding: utf-8 -*-
"""learn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1McKqUJchElvRzdxuGeGU9-05Zp35AnR2
"""

grid = {
    'top-L' : '     ' , 'top-M' : '     ' , 'top-R' : '     ',
    'mid-L' : '     ' , 'mid-M' : '     ' , 'mid-R' : '     ',
    'low-L' : '     ' , 'low-M' : '     ' , 'low-R' : '     ',
}
hintgrid = {
    'top-L' : 'top-L' , 'top-M' : 'top-M' , 'top-R' : 'top-R',
    'mid-L' : 'mid-L' , 'mid-M' : 'mid-M' , 'mid-R' : 'mid-R',
    'low-L' : 'low-L' , 'low-M' : 'low-M' , 'low-R' : 'low-R',
}

def printBoard(board):
  print(board['top-L'] + '|' + board['top-M'] + '|' + board['top-R'])
  print('-----+-----+-----')
  print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])
  print('-----+-----+-----')
  print(board['low-L'] + '|' + board['low-M'] + '|' + board['low-R'])

def checkfillgrid(board):
  grid = list(board.values())
  if not '     ' in grid:
    return False
  else:
    return True

def checkWinner(board):
  myOX2 = ('  O  ','  X  ')
  grid = list(board.values())
  if '     ' in grid:
    if (grid[0] == grid[1] == grid[2]):
      if (grid[0] and grid[1] and grid[2]) in myOX2:
        return True
    elif (grid[3] == grid[4] == grid[5]):
      if (grid[3] and grid[4] and grid[5]) in myOX2:
        return True
    elif (grid[6] == grid[7] == grid[8]):
      if (grid[6] and grid[7] and grid[8]) in myOX2:
        return True
    elif (grid[0] == grid[3] == grid[6]):
      if (grid[0] and grid[3] and grid[6]) in myOX2:
        return True
    elif (grid[1] == grid[4] == grid[7]):
      if (grid[1] and grid[4] and grid[7]) in myOX2:
        return True
    elif (grid[2] == grid[5] == grid[8]):
      if (grid[2] and grid[5] and grid[8]) in myOX2:
        return True
    elif (grid[0] == grid[4] == grid[8]):
      if (grid[0] and grid[4] and grid[8]) in myOX2:
        return True
    elif (grid[2] == grid[4] == grid[6]):
      if (grid[2] and grid[4] and grid[6]) in myOX2:
        return True

def replaceOX(myinput,sym,board):
  aleready = False
  try: 
    if board[myinput] == '     ':
      board[myinput] = '  ' + sym + '  ' 
      already = True
    else:
      print("you cannot replace this")
      already = False
  except KeyError:
    print(f"{myinput} is invalid input")
    already = False
  return(already)

def tic_tac_toe():
  symbols = ['O','X']
  isPlayerTurn = True
  myPlayer = symbols[0]
  myAI = symbols[1]
  player = input("select 'O' or 'X' : ")
  if player == symbols[0]:
    myPlayer = symbols[0]
    myAI = symbols[1]
  else:
    myPlayer = symbols[1]
    myAI = symbols[0]
  print(f"You selected {player}")
  while True:
    print('-----------------')
    printBoard(hintgrid) #print grid
    print('-----------------\n')
    print('-----------------')
    printBoard(grid)
    print('-----------------')
    if isPlayerTurn:
      print("player turn")
      position = input(f"place your {player} (or type 'exit' to exit) : ")
    else:
      print("AI turn")
      position = input(f"place your {myAI} (or type 'exit' to exit) : ")
    if position == "exit":
      print("You have been exit")
      break
    elif isPlayerTurn:
      if replaceOX(position,myPlayer,grid):
        isPlayerTurn = False
      else:
        isPlayerTurn = True
    else:
      if replaceOX(position,myAI,grid):
        isPlayerTurn = True
      else:
        isPlayerTurn = False
    if checkfillgrid(grid):
      if checkWinner(grid):
        print('-----------------')
        printBoard(grid)
        print('-----------------')
        if not isPlayerTurn: print(f"winner is {player}")
        else: print(f"winner is {myAI}")
        break
    else:
        print('-----------------')
        printBoard(grid)
        print('-----------------')
        print("TIE")   
        break

tic_tac_toe()